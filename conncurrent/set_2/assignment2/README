2.2 Multi-threaded Primality Test (Using Custom Semaphores)
Description

This task modifies Assignment 1.2 (Primality Test) to replace busy-wait synchronization with custom binary semaphores for efficient thread synchronization.

Key Changes:

    Workers notify availability using mysem_up.
    Master thread waits for an available worker using mysem_down.
    
The program is compiled using make and executed with ./all <number of threads> <numbers to check>, where the numbers are separated by spaces. A sample file, numbers.txt, containing 50 numbers from 50,000 to 10,000,000, was used for testing. The main thread acts as the master, assigning tasks to the first available worker. Print statements confirm concurrency: purple output indicates when a worker is assigned a number, while green output shows when a worker completes processing and prints Prime or Not Prime. Tasks are neither assigned nor completed in sequential order.
